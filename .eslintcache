[{"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\index.tsx":"1","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\reportWebVitals.ts":"2","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\layout\\App.tsx":"3","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\nav\\Nav.tsx":"4","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\sidenavbar\\SideNavBar.tsx":"5","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\transactions-table\\TransactionsTable.tsx":"6","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\transactions-table\\TransactionsBody.tsx":"7","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\transactions-table\\TransactionsFooter.tsx":"8","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\api\\agent.ts":"9","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\models\\Transaction.tsx":"10","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\home\\HomePage.tsx":"11","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\stores\\store.ts":"12","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\stores\\userStore.ts":"13","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\user\\RegisterUser.tsx":"14","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\common\\form\\MyTextInput.tsx":"15","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\user\\LoginUser.tsx":"16","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\stores\\commonStore.ts":"17"},{"size":704,"mtime":1614431558304,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":1610198693630,"results":"20","hashOfConfig":"19"},{"size":1330,"mtime":1614433034047,"results":"21","hashOfConfig":"19"},{"size":1423,"mtime":1614433093179,"results":"22","hashOfConfig":"19"},{"size":435,"mtime":1612719907244,"results":"23","hashOfConfig":"19"},{"size":4498,"mtime":1613312046766,"results":"24","hashOfConfig":"19"},{"size":2194,"mtime":1612654751663,"results":"25","hashOfConfig":"19"},{"size":1582,"mtime":1612647023533,"results":"26","hashOfConfig":"19"},{"size":1291,"mtime":1614429183839,"results":"27","hashOfConfig":"19"},{"size":462,"mtime":1613310738569,"results":"28","hashOfConfig":"19"},{"size":105,"mtime":1612719080775,"results":"29","hashOfConfig":"19"},{"size":437,"mtime":1614431293282,"results":"30","hashOfConfig":"19"},{"size":845,"mtime":1614431708178,"results":"31","hashOfConfig":"19"},{"size":2040,"mtime":1614383651351,"results":"32","hashOfConfig":"19"},{"size":622,"mtime":1613857361683,"results":"33","hashOfConfig":"19"},{"size":2381,"mtime":1614430870705,"results":"34","hashOfConfig":"19"},{"size":392,"mtime":1614431227481,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1h23fce",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\index.tsx",[],["75","76"],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\reportWebVitals.ts",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\layout\\App.tsx",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\nav\\Nav.tsx",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\sidenavbar\\SideNavBar.tsx",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\transactions-table\\TransactionsTable.tsx",["77"],"import React, { useEffect, useState } from \"react\";\r\nimport { Table } from \"semantic-ui-react\";\r\nimport agent from \"../../api/agent\";\r\nimport {\r\n  ICategorizeUserTransactionsDTO,\r\n  ITransaction,\r\n} from \"../../models/Transaction\";\r\nimport { TransactionsBody } from \"./TransactionsBody\";\r\nimport { TransactionsFooter } from \"./TransactionsFooter\";\r\n\r\nexport const TransactionsTable = () => {\r\n  const [transactions, setTransactions] = useState<ITransaction[]>([]);\r\n  /* Pagination */\r\n  const [transactionPage, setTransactionPage] = useState<ITransaction[]>([]);\r\n  const [currentPage, setCurrentPage] = useState<number>(1);\r\n  const [pageSize, setPageSize] = useState<number>(15);\r\n  const [pagination, setPagination] = useState<number[]>([]);\r\n\r\n  /* Async Category Update */\r\n  /*edit cell\r\n    - picking a value from dropdown will change all other transactions of this month with equal origin\r\n    - picking a value from dropdown will also make a request to /api/transactions/CategorizeAllTransactionsWithSimilarOrigins\r\n  */\r\n  const UpdateTransactionsWithSimilarOrigin = (\r\n    transactionId: number,\r\n    value: any\r\n  ) => {\r\n    console.log(\"UpdateTransactionsWithSimilarOrigin\");\r\n    console.log(`transactionId: ${transactionId}, value: ${value}`);\r\n\r\n    let newCategoryId: number = parseInt(value);\r\n    let body: ICategorizeUserTransactionsDTO = {\r\n      transactionId,\r\n      categoryId: newCategoryId,\r\n      userId: 1,\r\n    };\r\n\r\n    agent.Transactions.CategorizeAllTransactionsWithSimilarOrigins(body)\r\n      .then(() => {\r\n        let transaction = transactions.find((t) => t.id === transactionId);\r\n        let updatedTransactions = transactions.map((currentTransaction) => {\r\n          if (currentTransaction.origin === transaction?.origin) {\r\n            return {\r\n              ...currentTransaction,\r\n              category: newCategoryId,\r\n            };\r\n          }\r\n\r\n          return { ...currentTransaction };\r\n        });\r\n\r\n        setTransactions([...updatedTransactions]);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"Erro na função: CategorizeAllTransactionsWithSimilarOrigins\"\r\n        );\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  // TODO: create endpoint to get categories of transaction\r\n\r\n  // page was accessed for the first time\r\n  useEffect(() => {\r\n    console.log(\"First Acess\");\r\n\r\n    const CreatePages = (dataLength: number) => {\r\n      let totalOfPages = dataLength / pageSize;\r\n      let pageArray = [];\r\n      for (let index = 1; index < totalOfPages + 1; index++) {\r\n        pageArray.push(index);\r\n      }\r\n\r\n      setPagination(pageArray);\r\n    };\r\n\r\n    const GetTransactions = () => {\r\n      agent.Transactions.DevGetByDate({\r\n        userId: 1,\r\n        bankAccountId: 9,\r\n        year: 2020,\r\n        month: 1,\r\n      }).then((response) => {\r\n        setTransactions(response);\r\n        CreatePages(response.length);\r\n        // HandlePagination(response.data);\r\n      });\r\n    };\r\n\r\n    GetTransactions();\r\n  }, [pageSize]);\r\n\r\n  // page changed\r\n  useEffect(() => {\r\n    // console.log(\"page changed\");\r\n\r\n    const HandlePagination = (transactionData: ITransaction[]) => {\r\n      let totalOfPages = Math.ceil(transactionData.length / pageSize);\r\n      let startIndex = (currentPage - 1) * pageSize;\r\n      let endIndex = (currentPage - totalOfPages) * pageSize;\r\n\r\n      console.log(\"HandlePagination\");\r\n\r\n      if (endIndex === 0) {\r\n        setTransactionPage([...transactionData.slice(startIndex)]);\r\n      } else {\r\n        setTransactionPage([...transactionData.slice(startIndex, endIndex)]);\r\n      }\r\n    };\r\n\r\n    HandlePagination(transactions);\r\n  }, [currentPage, transactions, pageSize]);\r\n\r\n  return (\r\n    <div>\r\n      <Table celled selectable>\r\n        <Table.Header>\r\n          <Table.Row textAlign=\"center\">\r\n            <Table.HeaderCell>Date</Table.HeaderCell>\r\n            <Table.HeaderCell>Origin</Table.HeaderCell>\r\n            <Table.HeaderCell>Amount</Table.HeaderCell>\r\n            <Table.HeaderCell>Category</Table.HeaderCell>\r\n          </Table.Row>\r\n        </Table.Header>\r\n        <TransactionsBody\r\n          transactions={[...transactionPage]}\r\n          UpdateTransactionsWithSimilarOrigin={\r\n            UpdateTransactionsWithSimilarOrigin\r\n          }\r\n        />\r\n        <TransactionsFooter\r\n          currentPageNumber={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n          pagination={pagination}\r\n        />\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\transactions-table\\TransactionsBody.tsx",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\transactions-table\\TransactionsFooter.tsx",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\api\\agent.ts",["78"],"import axios, { AxiosResponse } from \"axios\";\r\nimport {\r\n  ICategorizeUserTransactionsDTO,\r\n  ITransaction,\r\n} from \"../models/Transaction\";\r\nimport { IUser, ILoginUserDTO, ISignInUserDTO } from \"../models/User\";\r\n\r\naxios.defaults.baseURL = \"https://localhost:5001/api\";\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\nconst requests = {\r\n  get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n  post: <T>(url: string, body: {}) =>\r\n    axios.post<T>(url, body).then(responseBody),\r\n  put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n  delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst Transactions = {\r\n  //TODO: alterar o tipo do body\r\n  DevGetByDate: (body: {}) =>\r\n    requests.post<ITransaction[]>(\"/transactions/DevGetByDate\", body),\r\n  CategorizeAllTransactionsWithSimilarOrigins: (\r\n    body: ICategorizeUserTransactionsDTO\r\n  ) =>\r\n    requests.put<void>(\r\n      \"/transactions/CategorizeAllTransactionsWithSimilarOrigins\",\r\n      body\r\n    ),\r\n};\r\n\r\nconst Users = {\r\n  SignIn: (body: ISignInUserDTO) => requests.post<void>(\"/auth/signin\", body),\r\n  Login: (body: ILoginUserDTO) => requests.post<IUser>(\"/auth/login\", body),\r\n};\r\n\r\nexport default {\r\n  Transactions,\r\n  Users,\r\n};\r\n","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\models\\Transaction.tsx",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\home\\HomePage.tsx",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\stores\\store.ts",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\stores\\userStore.ts",["79"],"import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { ILoginUserDTO, ISignInUserDTO, IUser } from \"../models/User\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n  user: IUser | null = null;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  get isLoggedIn() {\r\n    return !!this.user;\r\n  }\r\n\r\n  login = async (creds: ILoginUserDTO) => {\r\n    try {\r\n      const user = await agent.Users.Login(creds);\r\n      store.commonStore.setToken(user.token);\r\n      runInAction(() => (this.user = user));\r\n      // history.pushState('/home');\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  logout = () => {\r\n    store.commonStore.setToken(null);\r\n    window.localStorage.removeItem(\"jwt\");\r\n    this.user = null;\r\n    // history.pushState('/home');\r\n  };\r\n}\r\n","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\user\\RegisterUser.tsx",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\common\\form\\MyTextInput.tsx",[],"C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\features\\user\\LoginUser.tsx",["80","81","82"],"import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\nimport { Button, Header, Label, Segment } from \"semantic-ui-react\";\r\nimport * as Yup from \"yup\";\r\nimport agent from \"../../api/agent\";\r\nimport MyTextInput from \"../../common/form/MyTextInput\";\r\nimport { ILoginUserDTO } from \"../../models/User\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nfunction LoginUser() {\r\n  const { userStore } = useStore();\r\n  const history = useHistory();\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email(\"Email must be valid\").required(),\r\n    password: Yup.string().required(\"Password is required\"),\r\n  });\r\n\r\n  return (\r\n    <Segment>\r\n      <Header content={\"Login\"} color=\"teal\" />\r\n      <Formik\r\n        validationSchema={validationSchema}\r\n        initialValues={{ email: \"\", password: \"\", error: null }}\r\n        onSubmit={(values, { setErrors }) =>\r\n          userStore\r\n            .login(values)\r\n            .catch((error) => setErrors({ error: \"Invalid email or password\" }))\r\n        }\r\n      >\r\n        {({ handleSubmit, isValid, isSubmitting, dirty, errors }) => (\r\n          <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n            <MyTextInput\r\n              label=\"Email\"\r\n              type=\"email\"\r\n              name=\"email\"\r\n              placeholder=\"example@email.com\"\r\n            />\r\n            <MyTextInput\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              name=\"password\"\r\n              placeholder=\"your password\"\r\n            />\r\n            <ErrorMessage\r\n              name=\"error\"\r\n              render={() => (\r\n                <Label\r\n                  style={{ marginBottom: 10 }}\r\n                  basic\r\n                  color=\"red\"\r\n                  content={errors.error}\r\n                />\r\n              )}\r\n            />\r\n            <Button\r\n              loading={isSubmitting}\r\n              disabled={!dirty || !isValid}\r\n              type=\"submit\"\r\n            >\r\n              Login\r\n            </Button>\r\n            <Button as={NavLink} to=\"/register-user\" primary>\r\n              Register\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Segment>\r\n  );\r\n}\r\n\r\nexport default observer(LoginUser);\r\n","C:\\Users\\rabel\\react_projects\\yaba-spa\\src\\app\\stores\\commonStore.ts",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":16,"column":20,"nodeType":"89","messageId":"90","endLine":16,"endColumn":31},{"ruleId":"91","severity":1,"message":"92","line":37,"column":1,"nodeType":"93","endLine":40,"endColumn":3},{"ruleId":"87","severity":1,"message":"94","line":3,"column":25,"nodeType":"89","messageId":"90","endLine":3,"endColumn":39},{"ruleId":"87","severity":1,"message":"95","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":13},{"ruleId":"87","severity":1,"message":"96","line":9,"column":10,"nodeType":"89","messageId":"90","endLine":9,"endColumn":23},{"ruleId":"87","severity":1,"message":"97","line":14,"column":9,"nodeType":"89","messageId":"90","endLine":14,"endColumn":16},"no-native-reassign",["98"],"no-negated-in-lhs",["99"],"@typescript-eslint/no-unused-vars","'setPageSize' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'ISignInUserDTO' is defined but never used.","'agent' is defined but never used.","'ILoginUserDTO' is defined but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]